#!/usr/bin/env ruby

require 'optparse'
require 'yaml'
require "fontello_rails_converter"
command = ARGV[0]

if ARGV[0].nil?
  puts "Run fontello --help for help"
  exit
end

def set_options_based_on_rails_root(options)
  options[:asset_dir] = "#{options[:rails_root_dir]}/vendor/assets"
  options.merge!({
    stylesheet_dir: "#{options[:asset_dir]}/stylesheets",
    font_dir: "#{options[:asset_dir]}/fonts",
    icon_guide_dir: "#{options[:rails_root_dir]}/public",
    zip_file: "#{options[:rails_root_dir]}/tmp/fontello.zip",
    config_file: "#{options[:asset_dir]}/fonts/config.json",
    fontello_session_id_file: "#{options[:rails_root_dir]}/tmp/fontello_session_id",
    options_file: "#{options[:rails_root_dir]}/config/fontello_rails_converter.yml",
    assets_prefix_css: "/assets",
    assets_prefix_fonts: "/assets"
  })
end

def set_options_from_file(options)
  if File.exist?(options[:options_file])
    puts "Loading options from #{options[:options_file]}"
    options_from_file = YAML.load_file options[:options_file]
    options_from_file.each do |key, value|
      options[key.to_sym] = value  if options.keys.include?(key.to_sym)
    end
  end
end

# defaults
options = {
  rails_root_dir: '.',
  stylesheet_extension: '.scss'
}
set_options_based_on_rails_root(options)
set_options_from_file(options)

OptionParser.new do |opts|
  opts.banner = "Usage: fontello COMMAND [options]\n\n"

  opts.separator "Available commands: open, convert, copy, download\n\n"

  opts.separator "Global options:"

  opts.on("-o", "--options-file [PATH]", "options .yml file (default: /rails_root/config/fontello_rails_converter.yml)") do |opt|
    options[:options_file] = opt
    set_options_from_file(options)
  end

  opts.on("-i", "--fontello-session-id [ID]", "Pass in session ID from fontello.com (e.g. fb235ab72cad01d2b46aaa023ab4abbd) otherwise it will be taken from session-id-file\n\n") do |opt|
    options[:fontello_session_id] = opt
  end

  opts.separator "`open` options:"

  opts.on("-e", "--open-existing", "Doesn't open fontello based on config.json, but based on passed in or persisted sesssion id\n\n") do |opt|
    options[:open_existing] = true
  end

  opts.separator "`convert` options:"

  opts.on("-n", "--no-download", "Converts existing .zip file without automatically downloading a new one") do |opt|
    options[:no_download] = true
  end

  opts.on("--stylesheet-extension [EXTENSION]", "Pick between e.g. '.css.scss' or '.scss'\n\n") do |opt|
    options[:stylesheet_extension] = opt
  end

  opts.on("--webpack", "Generate for webpack") do |opt|
    options[:webpack] = true
  end

  opts.separator "`download` options:"

  opts.on("-u", "--use-config", "Uses existing config.json instead of persisted or passed in fontello session ID\n\n") do |opt|
    options[:use_config] = true
  end

  opts.separator "Path options:"

  opts.on("-r", "--rails-root [PATH]", "Rails root path (default: current location)") do |opt|
    options[:rails_root_dir] = opt
    set_options_based_on_rails_root(options)
  end

  opts.on("-c", "--config-file [PATH]", "config.json file (default: /rails_root/vendor/assets/fonts/config.json)") do |opt|
    options[:config_file] = opt
  end

  opts.on("-z", "--zip-file [PATH]", "Downloaded zip file (default: /rails_root/tmp/fontello.zip)") do |opt|
    options[:zip_file] = opt
  end

  opts.on("-a", "--asset-dir [PATH]", "Target asset directory (default: /rails_root/vendor/assets)") do |opt|
    options[:asset_dir] = opt
  end

  opts.on("-s", "--stylesheet-dir [PATH]", "Target stylesheet directory (default: /rails_root/vendor/assets/stylesheets)") do |opt|
    options[:stylesheet_dir] = opt
  end

  opts.on("-f", "--font-dir [PATH]", "Target font directory (default: /rails_root/vendor/assets/fonts)") do |opt|
    options[:font_dir] = opt
  end

  opts.on("--icon-guide-dir [PATH]", "Target icon guide (fontello-demo.html) directory (default: /rails_root/public)") do |opt|
    options[:icon_guide_dir] = opt
  end

  opts.on("-p", "--session-id-file [PATH]", "File to persist fontello session ID (default: /rails_root/tmp/fontello_session_id)") do |opt|
    options[:fontello_session_id_file] = opt
  end

  opts.on_tail("-v", "--version", "Show version") do
    puts FontelloRailsConverter::VERSION
    exit
  end

  opts.separator "\nExamples:\n"\
                 "    fontello open -r /path/to/railsapp\n"\
                 "    fontello convert\n"\
                 "    fontello download -e -i fb235ab72cad01d2b46aaa023ab4abbd\n"
end.parse!


unless ["open", "download", "convert", "copy"].include?(command)
  puts "available commands: open, download, convert, copy"
  exit
end

FontelloRailsConverter::Cli.new(options).send(command)
